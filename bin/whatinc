#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

whatinc - filter error output and try to identify the header files to add.

=head1 SYNOPSIS

whatinc [--help] [<options>]

=head1 DESCRIPTION

=head1 SUPPORTED PLATFORMS

 Unix (Linux verified)

=head1 SUPPORT

 Send email to peeterjoot@protonmail.com

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;
#use feature 'say' ;
#use Data::Dumper ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;

($myName = $0) =~ s@.*[/\\]@@ ;

#Getopt::Long::Configure( 'pass_through' ) ;
GetOptions (
   'help'               => sub { pod2usage(-verbose => 2) ; },
) or pod2usage(-verbose => 0) ;

# Validate/handle options, and everything else...

#print Dumper();

my @errno = (
q(errno),
q(EADDRINUSE),
q(EADDRNOTAVAIL),
q(EADV),
q(EAFNOSUPPORT),
q(EALREADY),
q(EBADE),
q(EBADFD),
q(EBADMSG),
q(EBADR),
q(EBADRQC),
q(EBADSLT),
q(EBFONT),
q(ECANCELED),
q(ECHRNG),
q(ECOMM),
q(ECONNABORTED),
q(ECONNREFUSED),
q(ECONNRESET),
q(EDEADLK),
q(EDEADLOCK),
q(EDESTADDRREQ),
q(EDOTDOT),
q(EDQUOT),
q(EHOSTDOWN),
q(EHOSTUNREACH),
q(EHWPOISON),
q(EIDRM),
q(EILSEQ),
q(EINPROGRESS),
q(EISCONN),
q(EISNAM),
q(EKEYEXPIRED),
q(EKEYREJECTED),
q(EKEYREVOKED),
q(EL2HLT),
q(EL2NSYNC),
q(EL3HLT),
q(EL3RST),
q(ELIBACC),
q(ELIBBAD),
q(ELIBEXEC),
q(ELIBMAX),
q(ELIBSCN),
q(ELNRNG),
q(ELOOP),
q(EMEDIUMTYPE),
q(EMSGSIZE),
q(EMULTIHOP),
q(ENAMETOOLONG),
q(ENAVAIL),
q(ENETDOWN),
q(ENETRESET),
q(ENETUNREACH),
q(ENOANO),
q(ENOBUFS),
q(ENOCSI),
q(ENODATA),
q(ENOKEY),
q(ENOLCK),
q(ENOLINK),
q(ENOMEDIUM),
q(ENOMSG),
q(ENONET),
q(ENOPKG),
q(ENOPROTOOPT),
q(ENOSR),
q(ENOSTR),
q(ENOSYS),
q(ENOTCONN),
q(ENOTEMPTY),
q(ENOTNAM),
q(ENOTRECOVERABLE),
q(ENOTSOCK),
q(ENOTSUP),
q(ENOTUNIQ),
q(EOPNOTSUPP),
q(EOVERFLOW),
q(EOWNERDEAD),
q(EPFNOSUPPORT),
q(EPROTO),
q(EPROTONOSUPPORT),
q(EPROTOTYPE),
q(EREMCHG),
q(EREMOTE),
q(EREMOTEIO),
q(ERESTART),
q(ERFKILL),
q(ESHUTDOWN),
q(ESOCKTNOSUPPORT),
q(ESRMNT),
q(ESTALE),
q(ESTRPIPE),
q(ETIME),
q(ETIMEDOUT),
q(ETOOMANYREFS),
q(EUCLEAN),
q(EUNATCH),
q(EUSERS),
q(EWOULDBLOCK),
q(EXFULL),
);

my @ctype = (
q(isalnum),
q(isalnum_l),
q(isalpha),
q(isalpha_l),
q(isascii),
q(isblank),
q(isblank_l),
q(iscntrl),
q(iscntrl_l),
q(isctype),
q(isdigit),
q(isdigit_l),
q(isgraph),
q(isgraph_l),
q(islower),
q(islower_l),
q(isprint),
q(isprint_l),
q(ispunct),
q(ispunct_l),
q(isspace),
q(isspace_l),
q(isupper),
q(isupper_l),
q(isxdigit),
q(isxdigit_l),
q(toascii),
q(_tolower),
q(tolower),
q(__tolower_l),
q(tolower_l),
q(_toupper),
q(toupper),
q(__toupper_l),
q(toupper_l),
);

my @netinet_in = (
q(bindresvport),
q(bindresvport6),
q(htonl),
q(htons),
q(IN6ADDR_ANY_INIT),
q(IN6ADDR_LOOPBACK_INIT),
q(IN6_IS_ADDR_MC_GLOBAL),
q(IN6_IS_ADDR_MC_LINKLOCAL),
q(IN6_IS_ADDR_MC_NODELOCAL),
q(IN6_IS_ADDR_MC_ORGLOCAL),
q(IN6_IS_ADDR_MC_SITELOCAL),
q(IN6_IS_ADDR_MULTICAST),
q(in_addr),
q(INADDR_ALLHOSTS_GROUP),
q(INADDR_ALLRTRS_GROUP),
q(INADDR_ALLSNOOPERS_GROUP),
q(INADDR_ANY),
q(INADDR_BROADCAST),
q(INADDR_LOOPBACK),
q(INADDR_MAX_LOCAL_GROUP),
q(INADDR_NONE),
q(in_addr_t),
q(INADDR_UNSPEC_GROUP),
q(IN_BADCLASS),
q(IN_CLASSA),
q(IN_CLASSA_HOST),
q(IN_CLASSA_MAX),
q(IN_CLASSA_NET),
q(IN_CLASSA_NSHIFT),
q(IN_CLASSB),
q(IN_CLASSB_HOST),
q(IN_CLASSB_MAX),
q(IN_CLASSB_NET),
q(IN_CLASSB_NSHIFT),
q(IN_CLASSC),
q(IN_CLASSC_HOST),
q(IN_CLASSC_NET),
q(IN_CLASSC_NSHIFT),
q(IN_CLASSD),
q(INET6_ADDRSTRLEN),
q(INET_ADDRSTRLEN),
q(IN_EXPERIMENTAL),
q(IN_LOOPBACKNET),
q(IN_MULTICAST),
q(in_port_t),
q(IPPORT_BIFFUDP),
q(IPPORT_CMDSERVER),
q(IPPORT_DAYTIME),
q(IPPORT_DISCARD),
q(IPPORT_ECHO),
q(IPPORT_EFSSERVER),
q(IPPORT_EXECSERVER),
q(IPPORT_FINGER),
q(IPPORT_FTP),
q(IPPORT_LOGINSERVER),
q(IPPORT_MTP),
q(IPPORT_NAMESERVER),
q(IPPORT_NETSTAT),
q(IPPORT_RESERVED),
q(IPPORT_RJE),
q(IPPORT_ROUTESERVER),
q(IPPORT_SMTP),
q(IPPORT_SUPDUP),
q(IPPORT_SYSTAT),
q(IPPORT_TELNET),
q(IPPORT_TFTP),
q(IPPORT_TIMESERVER),
q(IPPORT_TTYLINK),
q(IPPORT_USERRESERVED),
q(IPPORT_WHOIS),
q(IPPORT_WHOSERVER),
q(IPPROTO_AH),
q(IPPROTO_BEETPH),
q(IPPROTO_COMP),
q(IPPROTO_DCCP),
q(IPPROTO_DSTOPTS),
q(IPPROTO_EGP),
q(IPPROTO_ENCAP),
q(IPPROTO_ESP),
q(IPPROTO_ETHERNET),
q(IPPROTO_FRAGMENT),
q(IPPROTO_GRE),
q(IPPROTO_HOPOPTS),
q(IPPROTO_ICMP),
q(IPPROTO_ICMPV6),
q(IPPROTO_IDP),
q(IPPROTO_IGMP),
q(IPPROTO_IP),
q(IPPROTO_IPIP),
q(IPPROTO_IPV6),
q(IPPROTO_MH),
q(IPPROTO_MPLS),
q(IPPROTO_MPTCP),
q(IPPROTO_MTP),
q(IPPROTO_NONE),
q(IPPROTO_PIM),
q(IPPROTO_PUP),
q(IPPROTO_RAW),
q(IPPROTO_ROUTING),
q(IPPROTO_RSVP),
q(IPPROTO_SCTP),
q(IPPROTO_TCP),
q(IPPROTO_TP),
q(IPPROTO_UDP),
q(IPPROTO_UDPLITE),
q(ntohl),
q(ntohs),
q(sockaddr_in),
);

my @sys_resource = (
q(struct rusage),
q(getrusage),
q(getpriority),
q(getrlimit),
q(getrlimit64),
q(id_t),
q(__priority_which_t),
q(__rlimit_resource_t),
q(__rusage_who_t),
q(setpriority),
q(setrlimit),
q(setrlimit64),
);

my @fcntl = (
q(AT_EACCESS ),
q(AT_EMPTY_PATH),
q(AT_FDCWD),
q(AT_NO_AUTOMOUNT),
q(AT_REMOVEDIR),
q(AT_STATX_DONT_SYNC),
q(AT_STATX_FORCE_SYNC),
q(AT_STATX_SYNC_AS_STAT),
q(AT_STATX_SYNC_TYPE),
q(AT_SYMLINK_FOLLOW),
q(AT_SYMLINK_NOFOLLOW),
q(creat),
q(creat64),
q(DN_ACCESS),
q(DN_ATTRIB),
q(DN_CREATE),
q(DN_DELETE),
q(DN_MODIFY),
q(DN_MULTISHOT),
q(DN_RENAME),
q(F_ADD_SEALS),
q(fallocate),
q(fallocate64),
q(FAPPEND),
q(FASYNC),
q(fcntl),
q(FD_CLOEXEC),
q(F_DUPFD),
q(F_DUPFD_CLOEXEC),
q(F_EXLCK),
q(FFSYNC),
q(F_GETFD),
q(F_GET_FILE_RW_HINT),
q(F_GETFL),
q(F_GETLEASE),
q(F_GETLK),
q(F_GETLK64),
q(__F_GETOWN),
q(F_GETOWN),
q(__F_GETOWN_EX),
q(F_GETOWN_EX),
q(F_GETPIPE_SZ),
q(F_GET_RW_HINT),
q(F_GET_SEALS),
q(__F_GETSIG),
q(F_GETSIG),
q(FNDELAY),
q(FNONBLOCK),
q(F_NOTIFY),
q(F_OFD_GETLK),
q(F_OFD_SETLK),
q(F_OFD_SETLKW),
q(F_OK),
q(F_RDLCK),
q(F_SEAL_GROW),
q(F_SEAL_SEAL),
q(F_SEAL_SHRINK),
q(F_SEAL_WRITE),
q(F_SETFD),
q(F_SET_FILE_RW_HINT),
q(F_SETFL),
q(F_SETLEASE),
q(F_SETLK),
q(F_SETLK64),
q(F_SETLKW),
q(F_SETLKW64),
q(__F_SETOWN),
q(F_SETOWN),
q(__F_SETOWN_EX),
q(F_SETOWN_EX),
q(F_SETPIPE_SZ),
q(F_SET_RW_HINT),
q(__F_SETSIG),
q(F_SETSIG),
q(F_SHLCK),
q(F_UNLCK),
q(F_WRLCK),
q(LOCK_EX),
q(lockf),
q(lockf64),
q(LOCK_MAND),
q(LOCK_NB),
q(LOCK_READ),
q(LOCK_RW),
q(LOCK_SH),
q(LOCK_UN),
q(LOCK_WRITE),
q(MAX_HANDLE_SZ),
q(mode_t),
q(name_to_handle_at),
q(O_ACCMODE),
q(O_APPEND),
q(O_ASYNC),
q(__O_CLOEXEC),
q(O_CLOEXEC),
q(O_CREAT),
q(__O_DIRECT),
q(O_DIRECT),
q(__O_DIRECTORY),
q(O_DIRECTORY),
q(__O_DSYNC),
q(O_DSYNC),
q(O_EXCL),
q(off64_t),
q(off_t),
q(O_FSYNC),
q(__O_LARGEFILE),
q(O_LARGEFILE),
q(O_NDELAY),
q(__O_NOATIME),
q(O_NOATIME),
q(O_NOCTTY),
q(__O_NOFOLLOW),
q(O_NOFOLLOW),
q(O_NONBLOCK),
q(__O_PATH),
q(O_PATH),
q(open),
q(open64),
q(openat),
q(openat64),
q(open_by_handle_at),
q(O_RDONLY),
q(O_RDWR),
q(O_RSYNC),
q(O_SYNC),
q(__O_TMPFILE),
q(O_TMPFILE),
q(O_TRUNC),
q(O_WRONLY),
q(pid_t),
q(__POSIX_FADV_DONTNEED),
q(POSIX_FADV_DONTNEED),
q(posix_fadvise),
q(posix_fadvise64),
q(__POSIX_FADV_NOREUSE),
q(POSIX_FADV_NOREUSE),
q(POSIX_FADV_NORMAL),
q(POSIX_FADV_RANDOM),
q(POSIX_FADV_SEQUENTIAL),
q(POSIX_FADV_WILLNEED),
q(posix_fallocate),
q(posix_fallocate64),
q(readahead),
q(R_OK),
q(RWF_WRITE_LIFE_NOT_SET),
q(RWH_WRITE_LIFE_EXTREME),
q(RWH_WRITE_LIFE_LONG),
q(RWH_WRITE_LIFE_MEDIUM),
q(RWH_WRITE_LIFE_NONE),
q(RWH_WRITE_LIFE_NOT_SET),
q(RWH_WRITE_LIFE_SHORT),
q(SEEK_CUR),
q(SEEK_END),
q(SEEK_SET),
q(S_IFBLK),
q(S_IFCHR),
q(S_IFDIR),
q(S_IFIFO),
q(S_IFLNK),
q(S_IFMT),
q(S_IFREG),
q(S_IFSOCK),
q(S_IRGRP),
q(S_IROTH),
q(S_IRUSR),
q(S_IRWXG),
q(S_IRWXO),
q(S_IRWXU),
q(S_ISGID),
q(S_ISUID),
q(S_ISVTX),
q(S_IWGRP),
q(S_IWOTH),
q(S_IWUSR),
q(S_IXGRP),
q(S_IXOTH),
q(S_IXUSR),
q(splice),
q(SPLICE_F_GIFT),
q(SPLICE_F_MORE),
q(SPLICE_F_MOVE),
q(SPLICE_F_NONBLOCK),
q(struct file_handle),
q(struct flock),
q(struct flock64),
q(struct f_owner_ex),
q(sync_file_range),
q(SYNC_FILE_RANGE_WAIT_AFTER),
q(SYNC_FILE_RANGE_WAIT_BEFORE),
q(SYNC_FILE_RANGE_WRITE),
q(tee),
q(vmsplice),
q(W_OK),
q(X_OK),
);

my @stdio = (
q(BUFSIZ),
q(EOF),
q(fgetpos),
q(fopen),
q(freopen),
q(fscanf),
q(fseeko),
q(fsetpos),
q(ftello),
q(_IOFBF),
q(_IOLBF),
q(_IONBF),
q(P_tmpdir),
q(RENAME_EXCHANGE),
q(RENAME_NOREPLACE),
q(RENAME_WHITEOUT),
q(scanf),
q(SEEK_CUR),
q(SEEK_DATA),
q(SEEK_END),
q(SEEK_HOLE),
q(SEEK_SET),
q(sscanf),
q(stderr),
q(stdin),
q(stdout),
q(tmpfile),
q(vfscanf),
q(vscanf),
q(vsscanf),
q(__asprintf),
q(asprintf),
q(clearerr),
q(clearerr_unlocked),
q(ctermid),
q(cuserid),
q(dprintf),
q(fclose),
q(fcloseall),
q(fdopen),
q(feof),
q(feof_unlocked),
q(ferror),
q(ferror_unlocked),
q(fflush),
q(fflush_unlocked),
q(fgetc),
q(fgetc_unlocked),
q(fgetpos),
q(fgetpos64),
q(fgets),
q(fgets_unlocked),
q(fileno),
q(fileno_unlocked),
q(flockfile),
q(fmemopen),
q(fopen),
q(fopen64),
q(fopencookie),
q(fprintf),
q(fputc),
q(fputc_unlocked),
q(fputs),
q(fputs_unlocked),
q(fread),
q(fread_unlocked),
q(freopen),
q(freopen64),
q(fscanf),
q(fseek),
q(fseeko),
q(fseeko64),
q(fsetpos),
q(fsetpos64),
q(ftell),
q(ftello),
q(ftello64),
q(ftrylockfile),
q(funlockfile),
q(fwrite),
q(fwrite_unlocked),
q(getc),
q(getchar),
q(getchar_unlocked),
q(getc_unlocked),
q(__getdelim),
q(getdelim),
q(getline),
q(gets),
q(getw),
q(__isoc99_fscanf),
q(__isoc99_scanf),
q(__isoc99_sscanf),
q(__isoc99_vfscanf),
q(__isoc99_vscanf),
q(__isoc99_vsscanf),
q(obstack_printf),
q(obstack_vprintf),
q(open_memstream),
q(__overflow),
q(pclose),
q(perror),
q(popen),
q(printf),
q(putc),
q(putchar),
q(putchar_unlocked),
q(putc_unlocked),
q(puts),
q(putw),
q(remove),
q(rename),
q(renameat),
q(renameat2),
q(rewind),
q(scanf),
q(setbuf),
q(setbuffer),
q(setlinebuf),
q(setvbuf),
q(snprintf),
q(sprintf),
q(sscanf),
q(tempnam),
q(tmpfile),
q(tmpfile64),
q(tmpnam),
q(tmpnam_r),
q(__uflow),
q(ungetc),
q(vasprintf),
q(vdprintf),
q(vfprintf),
q(vfscanf),
q(vprintf),
q(vscanf),
q(vsnprintf),
q(vsprintf),
q(vsscanf),
);

my @netdb = (
q(AI_ADDRCONFIG),
q(AI_ALL),
q(AI_CANONIDN),
q(AI_CANONNAME),
q(AI_IDN),
q(AI_IDN_ALLOW_UNASSIGNED),
q(AI_IDN_USE_STD3_ASCII_RULES),
q(AI_NUMERICHOST),
q(AI_NUMERICSERV),
q(AI_PASSIVE),
q(AI_V4MAPPED),
q(EAI_ADDRFAMILY),
q(EAI_AGAIN),
q(EAI_ALLDONE),
q(EAI_BADFLAGS),
q(EAI_CANCELED),
q(EAI_FAIL),
q(EAI_FAMILY),
q(EAI_IDN_ENCODE),
q(EAI_INPROGRESS),
q(EAI_INTR),
q(EAI_MEMORY),
q(EAI_NODATA),
q(EAI_NONAME),
q(EAI_NOTCANCELED),
q(EAI_OVERFLOW),
q(EAI_SERVICE),
q(EAI_SOCKTYPE),
q(EAI_SYSTEM),
q(endhostent),
q(endnetent),
q(endnetgrent),
q(endprotoent),
q(endservent),
q(freeaddrinfo),
q(gai_cancel),
q(gai_error),
q(GAI_NOWAIT),
q(gai_strerror),
q(gai_suspend),
q(GAI_WAIT),
q(getaddrinfo),
q(getaddrinfo_a),
q(gethostbyaddr),
q(gethostbyaddr_r),
q(gethostbyname),
q(gethostbyname2),
q(gethostbyname2_r),
q(gethostbyname_r),
q(gethostent),
q(gethostent_r),
q(getnameinfo),
q(getnetbyaddr),
q(getnetbyaddr_r),
q(getnetbyname),
q(getnetbyname_r),
q(getnetent),
q(getnetent_r),
q(getnetgrent),
q(getnetgrent_r),
q(getprotobyname),
q(getprotobyname_r),
q(getprotobynumber),
q(getprotobynumber_r),
q(getprotoent),
q(getprotoent_r),
q(getservbyname),
q(getservbyname_r),
q(getservbyport),
q(getservbyport_r),
q(getservent),
q(getservent_r),
q(h_addr),
q(h_errno),
q(herror),
q(HOST_NOT_FOUND),
q(hstrerror),
q(innetgr),
q(IPPORT_RESERVED),
q(iruserok),
q(iruserok_af),
q(NETDB_INTERNAL),
q(NETDB_SUCCESS),
q(NI_DGRAM),
q(NI_IDN),
q(NI_IDN_ALLOW_UNASSIGNED),
q(NI_IDN_USE_STD3_ASCII_RULES),
q(NI_MAXHOST),
q(NI_MAXSERV),
q(NI_NAMEREQD),
q(NI_NOFQDN),
q(NI_NUMERICHOST),
q(NI_NUMERICSERV),
q(NO_ADDRESS),
q(NO_DATA),
q(NO_RECOVERY),
q(_PATH_HEQUIV),
q(_PATH_HOSTS),
q(_PATH_NETWORKS),
q(_PATH_NSSWITCH_CONF),
q(_PATH_PROTOCOLS),
q(_PATH_SERVICES),
q(rcmd),
q(rcmd_af),
q(rexec),
q(rexec_af),
q(rresvport),
q(rresvport_af),
q(ruserok),
q(ruserok_af),
q(SCOPE_DELIMITER),
q(sethostent),
q(setnetent),
q(setnetgrent),
q(setprotoent),
q(setservent),
q(struct addrinfo),
q(struct gaicb),
q(struct hostent),
q(struct protoent),
q(struct servent),
q(TRY_AGAIN),
);

my @pwd = (
q(endpwent),
q(fgetpwent),
q(fgetpwent_r),
q(getpw),
q(getpwent),
q(getpwent_r),
q(getpwnam),
q(getpwnam_r),
q(getpwuid),
q(getpwuid_r),
q(NSS_BUFLEN_PASSWD),
q(putpwent),
q(setpwent),
q(struct passwd),
);

my @sys_wait = (
q(WEXITSTATUS),
q(WTERMSIG),
q(WIFEXITED),
q(WIFSIGNALED),
q(WIFSTOPPED),
q(WIFCONTINUED),
q(WCOREDUMP),
q(WNOHANG),
q(WUNTRACED),
q(WSTOPPED),
q(WCONTINUED),
q(WNOWAIT),
q(__WCLONE),
q(__WALL),
q(__WNOTHREAD),
q(P_ALL),
q(P_PID),
q(P_PGID),
q(idtype_t),
q(struct rusage),
q(struct siginfo),
q(wait),
q(waitpid),
q(waitid),
q(wait3),
q(wait4),
);

my @sys_ioctl = (
q(FIOASYNC),
q(FIOCLEX),
q(FIOGETOWN),
q(FIONBIO),
q(FIONCLEX),
q(FIONREAD),
q(FIOQSIZE),
q(FIOSETOWN),
q(_IO),
q(_IOC),
q(_IOC_DIRMASK),
q(_IOC_DIRSHIFT),
q(IOC_IN),
q(IOC_INOUT),
q(_IOC_NONE),
q(_IOC_NRMASK),
q(_IOC_NRSHIFT),
q(IOC_OUT),
q(_IOC_READ),
q(_IOC_SIZE),
q(_IOC_SIZEMASK),
q(_IOC_SIZESHIFT),
q(ioctl),
q(_IOC_TYPECHECK),
q(_IOC_TYPEMASK),
q(_IOC_TYPESHIFT),
q(_IOC_WRITE),
q(_IOR),
q(_IOW),
q(_IOWR),
q(SIOCATMARK),
q(SIOCGHIWAT),
q(SIOCGLOWAT),
q(SIOCGSTAMP),
q(SIOCGSTAMPNS),
q(SIOCSHIWAT),
q(SIOCSLOWAT),
q(TCFLSH),
q(TCGETA),
q(TCGETS),
q(TCGETS2),
q(TCGETX),
q(TCSBRK),
q(TCSBRKP),
q(TCSETA),
q(TCSETAF),
q(TCSETAW),
q(TCSETS),
q(TCSETS2),
q(TCSETSF),
q(TCSETSF2),
q(TCSETSW),
q(TCSETSW2),
q(TCSETX),
q(TCSETXF),
q(TCSETXW),
q(TCXONC),
q(TIOCCBRK),
q(TIOCCONS),
q(TIOCEXCL),
q(TIOCGDEV),
q(TIOCGETD),
q(TIOCGEXCL),
q(TIOCGICOUNT),
q(TIOCGISO7816),
q(TIOCGLCKTRMIOS),
q(TIOCGPGRP),
q(TIOCGPKT),
q(TIOCGPTLCK),
q(TIOCGPTN),
q(TIOCGPTPEER),
q(TIOCGRS485),
q(TIOCGSERIAL),
q(TIOCGSID),
q(TIOCGSOFTCAR),
q(TIOCGWINSZ),
q(TIOCINQ),
q(TIOCLINUX),
q(TIOCMBIC),
q(TIOCMBIS),
q(TIOCMGET),
q(TIOCMIWAIT),
q(TIOCMSET),
q(TIOCNOTTY),
q(TIOCNXCL),
q(TIOCOUTQ),
q(TIOCPKT),
q(TIOCPKT_DATA),
q(TIOCPKT_DOSTOP),
q(TIOCPKT_FLUSHREAD),
q(TIOCPKT_FLUSHWRITE),
q(TIOCPKT_IOCTL),
q(TIOCPKT_NOSTOP),
q(TIOCPKT_START),
q(TIOCPKT_STOP),
q(TIOCSBRK),
q(TIOCSCTTY),
q(TIOCSERCONFIG),
q(TIOCSERGETLSR),
q(TIOCSERGETMULTI),
q(TIOCSERGSTRUCT),
q(TIOCSERGWILD),
q(TIOCSERSETMULTI),
q(TIOCSERSWILD),
q(TIOCSER_TEMT),
q(TIOCSETD),
q(TIOCSIG),
q(TIOCSISO7816),
q(TIOCSLCKTRMIOS),
q(TIOCSPGRP),
q(TIOCSPTLCK),
q(TIOCSRS485),
q(TIOCSSERIAL),
q(TIOCSSOFTCAR),
q(TIOCSTI),
q(TIOCSWINSZ),
q(TIOCVHANGUP),
);

my @pty = (
q(struct winsize),
q(openpty),
q(forkpty),
);

my @sys_socket = (
q(AF_INET),
q(AF_INET6),
q(AF_UNIX),
q(AF_UNSPEC),
q(SOCK_STREAM),
q(SOCK_DGRAM),
q(SOCK_RAW),
q(SOCK_SEQPACKET),
q(SOCK_RDM),
q(SOCK_CLOEXEC),
q(SOCK_NONBLOCK),
q(SOL_SOCKET),
q(SO_RCVBUF),
q(SO_SNDBUF),
q(SO_RCVLOWAT),
q(SO_SNDLOWAT),
q(SO_RCVTIMEO),
q(SO_SNDTIMEO),
q(SO_ACCEPTCONN),
q(SO_BROADCAST),
q(SO_KEEPALIVE),
q(SO_LINGER),
q(SO_OOBINLINE),
q(SO_REUSEADDR),
q(SO_TYPE),
q(SO_ERROR),
q(SO_BINDTODEVICE),
q(SO_GETPEERNAME),
q(SO_GETSOCKNAME),
q(SO_SETFIB),
q(SO_RCVBUFFORCE),
q(SO_SNDBUFFORCE),
q(SO_MAX_PACING_RATE),
q(SO_PRIORITY),
q(SO_TIMESTAMP),
q(SO_PASSCRED),
q(SO_PASSSEC),
q(SO_PEERCRED),
q(SO_PEERSEC),
q(SO_ATTACH_FILTER),
q(SO_DETACH_FILTER),
q(SO_ATTACH_REUSEPORT_CBPF),
q(SO_ATTACH_REUSEPORT_EBPF),
q(SO_REUSEPORT),
q(SO_ATTACH_BPF),
q(SO_ATTACH_REUSEPORT_BPF),
q(socket),
q(bind),
q(connect),
q(listen),
q(accept),
q(getsockname),
q(getpeername),
q(setsockopt),
q(getsockopt),
q(shutdown),
q(send),
q(sendto),
q(recv),
q(recvfrom),
q(recvmsg),
q(sendmsg),
q(poll),
q(select),
);

my @arpa_inet = (
q(AF_INET),
q(AF_INET6),
q(htonl),
q(htons),
q(INADDR_ANY),
q(INADDR_BROADCAST),
q(INADDR_DEFAULT),
q(INADDR_LOOPBACK),
q(INADDR_MAX_LOCAL_GROUP),
q(INADDR_NONE),
q(INADDR_UNSPECIFIED),
q(INET6_ADDRSTRLEN),
q(inet_addr),
q(INET_ADDRSTRLEN),
q(inet_aton),
q(inet_lnaof),
q(inet_makeaddr),
q(inet_netof),
q(inet_network),
q(inet_nsap_addr),
q(inet_nsap_ntoa),
q(inet_ntoa),
q(inet_ntop),
q(inet_pton),
q(ntohl),
q(ntohs),
);

my %all = (
   'pwd.h'          => \@pwd,
   'pty.h'          => \@pty,
   'netdb.h'        => \@netdb,
   'stdio.h'        => \@stdio,
   'fcntl.h'        => \@fcntl,
   'errno.h'        => \@errno,
   'ctype.h'        => \@ctype,
   'sys/resource.h' => \@sys_resource,
   'sys/wait.h'     => \@sys_wait,
   'sys/ioctl.h'    => \@sys_ioctl,
   'sys/socket.h'   => \@sys_socket,
   'arpa/inet.h'    => \@arpa_inet,
   'netinet/in.h'   => \@netinet_in,
);

my %add = ();
my $unhandled = 0;

LINE: while (<>)
{
   chomp;
   my $line = $_;

   next if (! m,^(.*?):(.*), );
   my ($filename, $msg) = ($1, $2);

   foreach my $h (keys %all) {
      my $ar = $all{$h};

      foreach my $pat (@$ar) {
         my $sq = q([‘’']);
         if ( $msg =~ /${sq}$pat${sq}/ ) {
            $add{"$filename:$h"}++;
            next LINE;
         }
      }
   }

   print "$line\n";
   $unhandled = 1;
}

print "\n\n" if ( $unhandled);

foreach (sort keys %add) 
{
   print "$_\n";
}
