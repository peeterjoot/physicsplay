#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" or see the lclient
# command for an example.  When done, check syntax with "podchecker".

=head1 NAME

my_findtop - Attempt to figure out the Root Path of the repository of interest.

=head1 SYNOPSIS

my_findtop [--help] [--relative]

=head1 DESCRIPTION

If set the $TOP environment variable will be used.

Otherwise, we look for the git top.  A variant of this script once looked for SVN repo info, but that's been removed.

=over 4

=item --relative

Report just the subdirectory path component for the directory relative to $TOP.

=back

=head1 SUPPORTED PLATFORMS

 Unix only

=head1 SUPPORT

 Send email to peeterjoot@pm.me

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;		# mandatory during testing
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;
($myName = $0) =~ s@.*[/\\]@@ ;
my $n = -1 ;
my $TOP = $ENV{TOP} ;
my $relative = 0 ;

($myName = $0) =~ s@.*[/\\]@@ ;

GetOptions (
   'relative!'          => \$relative,
   'help'               => sub { pod2usage(-verbose => 2) ; },
) or pod2usage(-verbose => 0) ;

my $home = $ENV{'HOME'} ;

foreach my $d ( ( '.' ) )
{
   chdir "$d" ;
   findtop() ;
}

die "$myName: Unable to determine the Root Path" if ( ! -d "$TOP" ) ;

exit 0 ;

sub findtop
{
   if ( ! -d "$TOP" )
   {
      $TOP = `git rev-parse --show-toplevel 2>/dev/null` ; chomp $TOP ;
   }

   if ( -d "$TOP" )
   {
      if ( $relative )
      {
         my $pwd = `pwd` ; chomp $pwd ;
         $pwd =~ s,^$TOP/,, ;

         print "$pwd\n" ;
      }
      else
      {
         print "$TOP\n" ;
      }

      exit 0 ;
   }
}
