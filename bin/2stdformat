#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

2stdformat - convert << ... << input into equivalent C++-20 std::format() representation.

=head1 SYNOPSIS

2stdformat [--help]

=head1 DESCRIPTION

Grok supplied code, with limitations:

https://x.com/i/grok/share/zhXIuA7BuSoIJ08gZgZJb1dty

only supports simple expressions within pairs of << ... <<

=head1 SUPPORTED PLATFORMS

 Unix (Linux verified)

=head1 SUPPORT

 Send email to peeterjoot@pm.me

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;

($myName = $0) =~ s@.*[/\\]@@ ;

#Getopt::Long::Configure( 'pass_through' ) ;
GetOptions (
   'help'               => sub { pod2usage(-verbose => 2) ; },
) or pod2usage(-verbose => 0) ;

# Read input from file or STDIN
my $input = join('', <>);

# Regex to match the entire string stream pattern
# Captures the stream variable and the sequence of << operations
while ($input =~ /(\w+)\s*<<\s*((?:"[^"]*"\s*<<\s*\w+\s*<<\s*)*"[^"]*"\s*(<<\s*\w+\s*)?[^;]*)/g) {
    my $stream_var = $1;
    my $full_pattern = $2;
    my @parts = split(/<<\s*/, $full_pattern);
    my $format_string = "";
    my @variables;

    # Process each part
    foreach my $part (@parts) {
        $part =~ s/^\s+|\s+$//g; # Trim whitespace
        if ($part =~ /^"([^"]*)"$/) {
            # String literal
            $format_string .= $1;
        } elsif ($part =~ /^\w+$/) {
            # Variable
            $format_string .= "{}";
            push @variables, $part;
        }
    }

    # Create the std::format replacement
    my $replacement = "std::format(\"$format_string\", " . join(", ", @variables) . ")";
    
    # Replace the original pattern
    $input =~ s/\Q$stream_var << $full_pattern\E/$replacement/;
}

# Print the modified code
print $input;

# vim: et ts=3 sw=3
